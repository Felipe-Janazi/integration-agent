## 1. Quais testes falharam?

| Timestamp | Test‑case (descrição) | Resultado |
|-----------|-----------------------|-----------|
| 2025‑09‑26 14:39:11 | **Login válido falhou** | Falha na asserção `expect(locator('#leftPanel > p')).toContainText('Welcome')` |
| 2025‑09‑26 14:39:14 | **Usuário deve atualizar telefone com sucesso** | O teste atingiu o limite de tempo (10 s) e abortou |
| 2025‑09‑26 14:39:25 | **Usuário deve atualizar telefone com campo vazio** | Também atingiu o limite de tempo (10 s) e abortou |

Todos os três testes foram marcados como *Failed* no relatório do Playwright.

---

## 2. Motivo de cada falha

### a) `Login válido falhou`

```
expect(locator('#leftPanel > p')).toContainText('Welcome') failed
Locator: locator('#leftPanel > p')
Expected string: "Welcome"
Received: <element(s) not found>
```

* **Por que:** O Playwright não encontrou nenhum elemento que corresponda ao selector `#leftPanel > p` dentro dos 5 s de espera.  
  * Possíveis causas:  
    1. O selector está incorreto (classe/id errado, elemento dentro de iframe, etc.).  
    2. A página ainda não terminou de carregar ou o painel ainda não está visível quando a asserção é executada.  
    3. O login não foi realmente concluído (erro na automação anterior).

### b) `Usuário deve atualizar telefone com sucesso`  

```
Test timeout of 10000ms exceeded.
```

* **Por que:** O teste ficou preso em alguma etapa (espera de elemento, navegação, requisição de rede ou validação) e não conseguiu completar dentro do tempo padrão (10 s).  
  * Possíveis causas:  
    1. O campo de telefone não aparece ou fica invisível por causa de animações/rotas lentas.  
    2. A requisição de atualização não retorna ou demora mais que 10 s.  
    3. O script não aguarda corretamente a resposta antes de verificar o resultado.

### c) `Usuário deve atualizar telefone com campo vazio`

* Mesmo motivo que (b): tempo limite excedido, indicando que alguma operação assíncrona (espera, requisição, redirecionamento) não terminou no tempo previsto.

---

## 3. Sugestões de correção

### 3.1. Corrigir o teste de login

| Passo | Ação | Dica |
|-------|------|------|
| 1 | **Verificar selector** | Use a ferramenta DevTools → Inspector para confirmar que `#leftPanel > p` realmente existe e é visível após o login. Se o elemento estiver dentro de um iframe, use `page.frame(nameOrURL).locator(...)`. |
| 2 | **Esperar a página estar pronta** | Em vez de usar o timeout fixo do `expect`, faça um `await page.waitForSelector('#leftPanel > p', { state: 'visible', timeout: 0 })`. Isso garante que a espera seja explícita. |
| 3 | **Confirmar que o login foi concluído** | Se o fluxo de login envolve redirecionamento, adicione `await page.waitForNavigation({ waitUntil: 'load' })` após enviar credenciais. |
| 4 | **Usar asserção robusta** | Use `await expect(page.locator('#leftPanel > p')).toHaveText('Welcome', { timeout: 10000 })`. O Playwright ajusta a espera automaticamente. |
| 5 | **Logs e snapshots** | Se persistir, adicione `await page.screenshot({ path: 'after-login.png' })` e `await page.content()` antes da asserção para inspeção visual. |

### 3.2. Corrigir os testes de atualização de telefone

| Passo | Ação | Dica |
|-------|------|------|
| 1 | **Revisar fluxo** | Certifique-se de que o script preenche o campo, clica em “Salvar” e aguarda a resposta. Exemplo:  
```ts
await page.fill('#phone', '123456789');
await page.click('button:has-text("Salvar")');
```
| 2 | **Esperar o resultado** | Se houver um toast/alerto, use:  
```ts
await expect(page.locator('.toast')).toHaveText('Telefone atualizado com sucesso', { timeout: 15000 });
``` |
| 3 | **Aumentar timeout temporariamente** | Para identificar se o problema é tempo de execução lento, aumente o timeout na linha de espera:  
```ts
await page.waitForResponse(/\/api\/updatePhone/, { timeout: 20000 });
``` |
| 4 | **Verificar requisição de rede** | Use `await page.waitForResponse(...)` para garantir que o endpoint de atualização realmente retornou. Se a resposta for 5xx, corrija o backend ou dados de teste. |
| 5 | **Tratamento de campo vazio** | No teste “campo vazio”, insira explicitamente o valor vazio (`await page.fill('#phone', '')`) e verifique a mensagem de erro. |
| 6 | **Logs detalhados** | Adicione `console.log(await page.content())` após cada passo crítico para capturar o estado da página. |
| 7 | **Configurar retries** | Se o teste for sensível a latência de rede, habilite *retry* na configuração do Playwright (`retries: 2`). |

### 3.3. Melhorias gerais

* **Configurar timeouts globais** – Em `playwright.config.ts`, aumente `timeout` para `20000`ms e `expect: { timeout: 15000 }` apenas se a aplicação realmente for lenta.  
* **Adicionar `playwright-test` fixtures** – Use fixtures para criar usuários de teste, fazer login antes de cada suite e limpar o estado depois.  
* **Uso de Page Object Model (POM)** – Isolar seletores e ações em classes (`LoginPage`, `ProfilePage`) facilita a manutenção.  
* **Captura de logs de rede** – Em casos de timeouts, analise a requisição que está travando com `await page.waitForResponse(...)` e verifique a resposta no console do navegador.  

---

## Resumo rápido de correções

| Teste | Problema | Correção imediata |
|-------|----------|--------------------|
| Login válido falhou | Elemento não encontrado | Verificar selector + esperar `page.waitForSelector('#leftPanel > p', { state: 'visible' })` |
| Atualizar telefone (sucesso) | Timeout | Esperar a resposta da API (`waitForResponse`), validar toast, aumentar timeout se necessário |
| Atualizar telefone (campo vazio) | Timeout | Mesmo que acima, mas com verificação de mensagem de erro, usar `await page.fill('#phone', '')` antes da ação |

Após aplicar as correções acima, execute os testes novamente. Se ainda houver falhas, capture screenshots e conteúdo HTML em cada etapa para diagnóstico mais aprofundado.