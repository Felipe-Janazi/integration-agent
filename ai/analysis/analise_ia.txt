## 1. Quais testes falharam?

| # | Descrição do Teste | Status |
|---|--------------------|--------|
| 1 | **Login válido falhou** | ❌ Falhou |
| 2 | **Usuário deve atualizar telefone com sucesso falhou** | ❌ Falhou |
| 3 | **Usuário deve atualizar telefone com campo vazio falhou** | ❌ Falhou |

Todos os testes registrados no log acabaram em erro.

---

## 2. Por que cada falha aconteceu?

| # | Teste | Mensagem de erro | Causa provável |
|---|-------|------------------|----------------|
| 1 | **Login válido falhou** | `expect(locator).toContainText(expected) failed <element(s) not found>` | O seletor `#leftPanel > p` não encontrou nenhum elemento. Isso pode ocorrer por: <br>• O elemento aparece apenas após a página terminar de carregar ou após uma animação. <br>• O seletor está incorreto (ex.: ID ou hierarquia mudou). <br>• O elemento está dentro de um *iframe* ou shadow‑DOM. <br>• O login não foi concluído corretamente e a mensagem “Welcome” nunca aparece. |
| 2 | **Usuário deve atualizar telefone com sucesso falhou** | `Test timeout of 10000ms exceeded.` | O teste ficou preso esperando algo que nunca aconteceu, como: <br>• Falta de `await` em alguma ação (click, fill, navigation). <br>• Um `await expect(...).toHaveText(...)` sem timeout adequado. <br>• O fluxo de atualização de telefone envolve redirecionamento que não está sendo aguardado (p.ex. `page.waitForNavigation`). <br>• O elemento de confirmação (mensagem de sucesso, mudança de estado) nunca aparece. |
| 3 | **Usuário deve atualizar telefone com campo vazio falhou** | `Test timeout of 10000ms exceeded.` | Mesma situação do teste 2, mas agora o fluxo deve validar um erro (ex.: mensagem “Campo obrigatório”). Se o fluxo de validação não é acionado, o teste pode ficar esperando indefinidamente. |

---

## 3. Como corrigir os erros

### 3.1. Correções gerais

| Passo | O que fazer | Por quê |
|-------|-------------|---------|
| **A. Habilitar a gravação de *trace* e tirar screenshot** | Adicione `await page.context().tracing.start({ screenshots: true, snapshots: true });` antes do teste e `await page.context().tracing.stop({ path: 'trace.zip' });` depois. | Permite reproduzir o que realmente aconteceu e descobrir se o elemento apareceu ou se houve erro de carregamento. |
| **B. Validar a página está no estado correto** | Use `await page.waitForLoadState('networkidle');` ou `await page.waitForURL('**/dashboard');` antes de procurar pelo elemento. | Garante que a página terminou de carregar e que o login foi concluído. |
| **C. Revisar e refatorar os *locators*** | 1. Confirme o seletor no dev‑tools (inspecione o elemento depois do login). <br>2. Se for dentro de um iframe, use `const frame = await page.frame({ name: /leftPanel/ });` e `frame.locator('p')`. <br>3. Evite seletores muito específicos (`>`) que dependem de estrutura exata. | Se o seletor está errado, o Playwright não encontra nada e a asserção falha. |
| **D. Usar `expect` com tempo de espera mais longo ou com *polling*** | `await expect(page.locator('#leftPanel > p')).toContainText('Welcome', { timeout: 10000 });` | Dá mais tempo para o elemento aparecer. |
| **E. Garantir que todas as interações são *awaited*** | `await page.click('#submit'); await page.waitForNavigation({ waitUntil: 'networkidle' });` | Se algum `await` faltar, o fluxo fica travado e o timeout ocorre. |
| **F. Adicionar logs intermediários** | `console.log('Login OK, procurando pela mensagem...');` | Permite ver exatamente onde o teste fica parado. |

---

### 3.2. Soluções específicas

#### 3.2.1. **Login válido falhou**

```ts
test('Login válido', async ({ page }) => {
  // 1. Acessar a página
  await page.goto('https://meu-app.com/login');

  // 2. Preencher e submeter
  await page.fill('#username', 'usuario');
  await page.fill('#password', 'senha');
  await page.click('#loginBtn');

  // 3. Esperar o redirecionamento (ou ficar na mesma página se for SPA)
  await page.waitForNavigation({ waitUntil: 'networkidle' });

  // 4. Confirmar que a mensagem aparece
  const welcomeMsg = page.locator('#leftPanel p');  // ajuste o seletor se necessário
  await expect(welcomeMsg).toBeVisible({ timeout: 8000 });
  await expect(welcomeMsg).toContainText('Welcome');
});
```

- **Se o elemento estiver dentro de um iframe**:

```ts
const frame = await page.frame({ name: /leftPanel/ }); // ou use selector
await expect(frame.locator('p')).toContainText('Welcome');
```

#### 3.2.2. **Usuário deve atualizar telefone com sucesso falhou**

```ts
test('Usuário deve atualizar telefone com sucesso', async ({ page }) => {
  // 1. Navegar para a página de perfil
  await page.goto('https://meu-app.com/perfil');

  // 2. Interagir com o campo de telefone
  const phoneInput = page.locator('#phoneInput');
  await expect(phoneInput).toBeVisible({ timeout: 8000 });
  await phoneInput.fill('1199999999');

  // 3. Submeter o formulário
  await page.click('#updatePhoneBtn');

  // 4. Esperar a mensagem de sucesso
  const successMsg = page.locator('.toast-success');
  await expect(successMsg).toBeVisible({ timeout: 8000 });
  await expect(successMsg).toContainText('Telefone atualizado com sucesso');
});
```

- Se a página faz redirecionamento: `await page.waitForNavigation({ waitUntil: 'networkidle' });`

#### 3.2.3. **Usuário deve atualizar telefone com campo vazio falhou**

```ts
test('Usuário deve atualizar telefone com campo vazio', async ({ page }) => {
  await page.goto('https://meu-app.com/perfil');

  const phoneInput = page.locator('#phoneInput');
  await expect(phoneInput).toBeVisible();
  await phoneInput.fill(''); // campo vazio

  await page.click('#updatePhoneBtn');

  const errorMsg = page.locator('.toast-error'); // ou elemento de erro
  await expect(errorMsg).toBeVisible({ timeout: 8000 });
  await expect(errorMsg).toContainText('O campo telefone é obrigatório');
});
```

- **Caso o fluxo de validação não acione**: verifique se o botão de envio não tem `type="button"` ao invés de `type="submit"` e se o formulário não está sendo submetido via JavaScript. Se usar AJAX, aguarde a resposta:

```ts
await Promise.all([
  page.waitForResponse(resp => resp.url().includes('/api/phone') && resp.status() === 200),
  page.click('#updatePhoneBtn')
]);
```

---

## 4. Dicas de depuração avançada

| Ferramenta | Como usar | Quando usar |
|------------|-----------|-------------|
| **Playwright Inspector** | `await page.pause();` antes do erro | Permite passo a passo e inspecionar DOM |
| **Trace Viewer** | `playwright show-trace trace.zip` | Ver transição de página, screenshots e eventos |
| **Network Monitor** | `page.on('response', res => console.log(res.url(), res.status()));` | Identificar se APIs retornam erro |
| **Console logs** | `await page.evaluate(() => console.log(document.body.innerHTML));` | Visualizar markup real no ponto crítico |
| **Debugger** | `debugger;` dentro do teste | Pausar a execução e inspecionar variáveis |

---

## 5. Resumo rápido

| Teste | Falha | Solução principal |
|-------|-------|--------------------|
| Login válido | Elemento não encontrado | Revise o seletor e aguarde carregamento / redirecionamento. |
| Atualizar telefone (sucesso) | Timeout | Garanta `await` em ações, adicione `waitForNavigation` ou `waitForResponse`, aumente timeout se necessário. |
| Atualizar telefone (campo vazio) | Timeout | Garanta que a validação de campo vazio seja acionada e que o teste aguarde a mensagem de erro. |

Com essas alterações, o fluxo de cada teste deve terminar dentro do limite de tempo e as asserções devem encontrar os elementos corretos. Boa sorte!